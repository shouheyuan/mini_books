{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('quantize');var quantize = __REQUIRE_DEFAULT__(__TEMP__);\n\nconst toString = array =>\n  `#${((1 << 24) + (array[0] << 16) + (array[1] << 8) + array[2])\n    .toString(16)\n    .slice(1)}`;\n\nconst proxy = (data, fn) => {\n  if (data.map(item => Array.isArray(item)).includes(true)) {\n    return data.map(item => fn(item));\n  } else {\n    return fn(data);\n  }\n};\n\nconst getGray = rgb => (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\nconst colorThief = pixels => ({\n  palette(count, quality) {\n    if (typeof count === \"undefined\" || count < 2 || count > 256) {\n      count = 10;\n    }\n    if (typeof quality === \"undefined\" || quality < 1) {\n      quality = 10;\n    }\n\n    // Store the RGB values in an array format suitable for quantize function\n    let pixelArray = [];\n    for (\n      let i = 0, offset, r, g, b, a;\n      i < pixels.length / 4;\n      i = i + quality\n    ) {\n      offset = i * 4;\n      r = pixels[offset + 0];\n      g = pixels[offset + 1];\n      b = pixels[offset + 2];\n      a = pixels[offset + 3];\n      // If pixel is mostly opaque and not white\n      if (a >= 125) {\n        if (!(r > 250 && g > 250 && b > 250)) {\n          pixelArray.push([r, g, b]);\n        }\n      }\n    }\n    this._data = quantize(pixelArray, count).palette() || null;\n    return this;\n  },\n  color(quality) {\n    let palette = this.palette(5, quality)._data;\n    if (palette) {\n      this._data = palette[0];\n      return this;\n    } else {\n      console.error(\n        \"[MiniApp Color Thief] getColor has error: palette length is zero.\"\n      );\n    }\n  },\n  __proto__: {\n    get() {\n      return this._data;\n    },\n    getHex() {\n      return proxy(this._data, toString);\n    },\n    getGray() {\n      return proxy(this._data, getGray);\n    },\n    isDark() {\n      return proxy(this._data, data => getGray(data) < 127.5);\n    },\n    isLight() {\n      return proxy(this._data, data => getGray(data) >= 127.5);\n    }\n  }\n});\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = colorThief;\n"]}